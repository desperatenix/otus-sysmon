// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysMonClient is the client API for SysMon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysMonClient interface {
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (SysMon_GetStatsClient, error)
}

type sysMonClient struct {
	cc grpc.ClientConnInterface
}

func NewSysMonClient(cc grpc.ClientConnInterface) SysMonClient {
	return &sysMonClient{cc}
}

func (c *sysMonClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (SysMon_GetStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SysMon_ServiceDesc.Streams[0], "/api.SysMon/GetStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &sysMonGetStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SysMon_GetStatsClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type sysMonGetStatsClient struct {
	grpc.ClientStream
}

func (x *sysMonGetStatsClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SysMonServer is the server API for SysMon service.
// All implementations must embed UnimplementedSysMonServer
// for forward compatibility
type SysMonServer interface {
	GetStats(*StatsRequest, SysMon_GetStatsServer) error
	mustEmbedUnimplementedSysMonServer()
}

// UnimplementedSysMonServer must be embedded to have forward compatible implementations.
type UnimplementedSysMonServer struct{}

func (UnimplementedSysMonServer) GetStats(*StatsRequest, SysMon_GetStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSysMonServer) mustEmbedUnimplementedSysMonServer() {}

// UnsafeSysMonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysMonServer will
// result in compilation errors.
type UnsafeSysMonServer interface {
	mustEmbedUnimplementedSysMonServer()
}

func RegisterSysMonServer(s grpc.ServiceRegistrar, srv SysMonServer) {
	s.RegisterService(&SysMon_ServiceDesc, srv)
}

func _SysMon_GetStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SysMonServer).GetStats(m, &sysMonGetStatsServer{stream})
}

type SysMon_GetStatsServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type sysMonGetStatsServer struct {
	grpc.ServerStream
}

func (x *sysMonGetStatsServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

// SysMon_ServiceDesc is the grpc.ServiceDesc for SysMon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysMon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SysMon",
	HandlerType: (*SysMonServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStats",
			Handler:       _SysMon_GetStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sysmon.proto",
}
